
arm_synth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005bc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000005bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  000009f0  00020434  2**2
                  ALLOC
  3 .stack        00000404  20000474  00000a30  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00004a86  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050d  00000000  00000000  00024f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000107  00000000  00000000  00025448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000a0  00000000  00000000  0002554f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000255ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000e7a2  00000000  00000000  0002564f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001a2a  00000000  00000000  00033df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005ced5  00000000  00000000  0003581b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000002ac  00000000  00000000  000926f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	78 08 00 20 e5 02 00 00 e1 02 00 00 e1 02 00 00     x.. ............
	...
  2c:	e1 02 00 00 00 00 00 00 00 00 00 00 e1 02 00 00     ................
  3c:	e1 02 00 00 e1 02 00 00 e1 02 00 00 e1 02 00 00     ................
  4c:	e1 02 00 00 e1 02 00 00 e1 02 00 00 e1 02 00 00     ................
  5c:	e1 02 00 00 e1 02 00 00 e1 02 00 00 e1 02 00 00     ................
  6c:	e1 02 00 00 e1 02 00 00 e1 02 00 00 e1 02 00 00     ................
  7c:	e1 02 00 00 e1 02 00 00 e1 02 00 00 e1 02 00 00     ................

0000008c <__do_global_dtors_aux>:
  8c:	b510      	push	{r4, lr}
  8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
  90:	7823      	ldrb	r3, [r4, #0]
  92:	2b00      	cmp	r3, #0
  94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
  96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
  98:	2b00      	cmp	r3, #0
  9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
  9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
  9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
  a0:	bf00      	nop
  a2:	2301      	movs	r3, #1
  a4:	7023      	strb	r3, [r4, #0]
  a6:	bd10      	pop	{r4, pc}
  a8:	20000434 	.word	0x20000434
  ac:	00000000 	.word	0x00000000
  b0:	000005bc 	.word	0x000005bc

000000b4 <frame_dummy>:
  b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
  b6:	b510      	push	{r4, lr}
  b8:	2b00      	cmp	r3, #0
  ba:	d003      	beq.n	c4 <frame_dummy+0x10>
  bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
  be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
  c0:	e000      	b.n	c4 <frame_dummy+0x10>
  c2:	bf00      	nop
  c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
  c6:	6803      	ldr	r3, [r0, #0]
  c8:	2b00      	cmp	r3, #0
  ca:	d100      	bne.n	ce <frame_dummy+0x1a>
  cc:	bd10      	pop	{r4, pc}
  ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
  d0:	2b00      	cmp	r3, #0
  d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
  d4:	4798      	blx	r3
  d6:	e7f9      	b.n	cc <frame_dummy+0x18>
  d8:	00000000 	.word	0x00000000
  dc:	20000438 	.word	0x20000438
  e0:	000005bc 	.word	0x000005bc
  e4:	000005bc 	.word	0x000005bc
  e8:	00000000 	.word	0x00000000

000000ec <setupADC>:
#include "sam.h"
#include "ECLIPSE_adc.h"
void setupADC(void) {
  ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  ee:	46c6      	mov	lr, r8
  f0:	b500      	push	{lr}
  
	/* Enable the APB clock for the ADC. */
	PM->APBCMASK.reg |= PM_APBCMASK_ADC;
  f2:	4a69      	ldr	r2, [pc, #420]	; (298 <setupADC+0x1ac>)
  f4:	6a11      	ldr	r1, [r2, #32]
  f6:	2380      	movs	r3, #128	; 0x80
  f8:	005b      	lsls	r3, r3, #1
  fa:	430b      	orrs	r3, r1
  fc:	6213      	str	r3, [r2, #32]
  
	/* Enable GCLK0 (48Mhz) for the ADC */
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
  fe:	4a67      	ldr	r2, [pc, #412]	; (29c <setupADC+0x1b0>)
 100:	4b67      	ldr	r3, [pc, #412]	; (2a0 <setupADC+0x1b4>)
 102:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0 |
                      GCLK_CLKCTRL_ID_ADC;
  
	/* Wait for bus synchronization. */
	while (GCLK->STATUS.bit.SYNCBUSY) {};
 104:	001a      	movs	r2, r3
 106:	7853      	ldrb	r3, [r2, #1]
 108:	09db      	lsrs	r3, r3, #7
 10a:	d1fc      	bne.n	106 <setupADC+0x1a>

	/* Reset the ADC. */
	ADC->CTRLA.bit.ENABLE = 0;
 10c:	4a65      	ldr	r2, [pc, #404]	; (2a4 <setupADC+0x1b8>)
 10e:	7813      	ldrb	r3, [r2, #0]
 110:	2102      	movs	r1, #2
 112:	438b      	bics	r3, r1
 114:	7013      	strb	r3, [r2, #0]
	while (ADC->STATUS.bit.SYNCBUSY) {};
 116:	7e53      	ldrb	r3, [r2, #25]
 118:	09db      	lsrs	r3, r3, #7
 11a:	d1fc      	bne.n	116 <setupADC+0x2a>
	ADC->CTRLA.bit.SWRST = 1;
 11c:	4a61      	ldr	r2, [pc, #388]	; (2a4 <setupADC+0x1b8>)
 11e:	7813      	ldrb	r3, [r2, #0]
 120:	2101      	movs	r1, #1
 122:	430b      	orrs	r3, r1
 124:	7013      	strb	r3, [r2, #0]
	while (ADC->CTRLA.bit.SWRST || ADC->STATUS.bit.SYNCBUSY) {};
 126:	7813      	ldrb	r3, [r2, #0]
 128:	07db      	lsls	r3, r3, #31
 12a:	d4fc      	bmi.n	126 <setupADC+0x3a>
 12c:	7e53      	ldrb	r3, [r2, #25]
 12e:	09db      	lsrs	r3, r3, #7
 130:	d1f9      	bne.n	126 <setupADC+0x3a>

  /* Load factory calibration. */
	uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
 132:	4b5d      	ldr	r3, [pc, #372]	; (2a8 <setupADC+0x1bc>)
 134:	681a      	ldr	r2, [r3, #0]
 136:	0691      	lsls	r1, r2, #26
 138:	0f49      	lsrs	r1, r1, #29
	uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
 13a:	4b5c      	ldr	r3, [pc, #368]	; (2ac <setupADC+0x1c0>)
 13c:	681c      	ldr	r4, [r3, #0]
 13e:	0ee4      	lsrs	r4, r4, #27
	linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
 140:	0152      	lsls	r2, r2, #5
 142:	23ff      	movs	r3, #255	; 0xff
 144:	4013      	ands	r3, r2
 146:	431c      	orrs	r4, r3
  
  /* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 148:	4a56      	ldr	r2, [pc, #344]	; (2a4 <setupADC+0x1b8>)
 14a:	7e53      	ldrb	r3, [r2, #25]
 14c:	09db      	lsrs	r3, r3, #7
 14e:	d1fc      	bne.n	14a <setupADC+0x5e>
  
  /* Write the calibration data. */
	ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
 150:	020b      	lsls	r3, r1, #8
 152:	4323      	orrs	r3, r4
 154:	4a53      	ldr	r2, [pc, #332]	; (2a4 <setupADC+0x1b8>)
 156:	8513      	strh	r3, [r2, #40]	; 0x28
  
  /* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 158:	7e53      	ldrb	r3, [r2, #25]
 15a:	09db      	lsrs	r3, r3, #7
 15c:	d1fc      	bne.n	158 <setupADC+0x6c>
  
  /* Use the internal VCC reference. This is 1/2 of what's on VCCA.
     since VCCA is typically 3.3v, this is 1.65v.
  */
	ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
 15e:	4b51      	ldr	r3, [pc, #324]	; (2a4 <setupADC+0x1b8>)
 160:	2202      	movs	r2, #2
 162:	705a      	strb	r2, [r3, #1]
  

	ADC->AVGCTRL.reg = ECLIPSE_ADC_NUM_SAMPS | ECLIPSE_ADC_ADJRES; //tweak later for N/R if it's an issue
 164:	2533      	movs	r5, #51	; 0x33
 166:	709d      	strb	r5, [r3, #2]
  
	// prescale div and resolution
	ADC->CTRLB.reg = ECLIPSE_ADC_PRESCALER_DIV |
 168:	320e      	adds	r2, #14
 16a:	4690      	mov	r8, r2
 16c:	2010      	movs	r0, #16
 16e:	809a      	strh	r2, [r3, #4]
  
     - MUXNEG_GND means that the ADC should compare the input value to GND.
  
     - MUXPOS_PINx means that the ADC should read from pin x
	*/
	ADC->INPUTCTRL.reg = 
 170:	4a4f      	ldr	r2, [pc, #316]	; (2b0 <setupADC+0x1c4>)
 172:	611a      	str	r2, [r3, #16]
		ADC_INPUTCTRL_GAIN_DIV2 |
		ADC_INPUTCTRL_MUXNEG_GND |
		ADC_INPUTCTRL_MUXPOS_PIN0; //Will be updated regularly
	  
	//set sample time to change input impedance
	ADC->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(1);
 174:	2101      	movs	r1, #1
 176:	2201      	movs	r2, #1
 178:	70d9      	strb	r1, [r3, #3]
  
	/* Set  __ as an input pin. */
	PORT->Group[0].DIRCLR.reg |= PORT_PA02;
 17a:	4b4e      	ldr	r3, [pc, #312]	; (2b4 <setupADC+0x1c8>)
 17c:	685f      	ldr	r7, [r3, #4]
 17e:	2404      	movs	r4, #4
 180:	46a4      	mov	ip, r4
 182:	4327      	orrs	r7, r4
 184:	605f      	str	r7, [r3, #4]
  
	/* Enable the peripheral multiplexer for pins. */
	PORT->Group[0].PINCFG[2].reg |= PORT_PINCFG_PMUXEN;
 186:	2742      	movs	r7, #66	; 0x42
 188:	5ddc      	ldrb	r4, [r3, r7]
 18a:	4314      	orrs	r4, r2
 18c:	b2e4      	uxtb	r4, r4
 18e:	55dc      	strb	r4, [r3, r7]
	PORT->Group[0].PMUX[2 >> 1].reg = PORT_PMUX_PMUXE_B;
 190:	3f11      	subs	r7, #17
 192:	55d9      	strb	r1, [r3, r7]
	PORT->Group[0].DIRCLR.reg |= PORT_PA02;
 194:	685c      	ldr	r4, [r3, #4]
 196:	4666      	mov	r6, ip
 198:	4334      	orrs	r4, r6
 19a:	605c      	str	r4, [r3, #4]
	
	PORT->Group[0].PINCFG[3].reg |= PORT_PINCFG_PMUXEN;
 19c:	2443      	movs	r4, #67	; 0x43
 19e:	46a4      	mov	ip, r4
 1a0:	5d1c      	ldrb	r4, [r3, r4]
 1a2:	4314      	orrs	r4, r2
 1a4:	b2e4      	uxtb	r4, r4
 1a6:	4666      	mov	r6, ip
 1a8:	559c      	strb	r4, [r3, r6]
	PORT->Group[0].PMUX[3 >> 1].reg = PORT_PMUX_PMUXO_B;
 1aa:	55d8      	strb	r0, [r3, r7]
	PORT->Group[0].DIRCLR.reg |= PORT_PA03;
 1ac:	685c      	ldr	r4, [r3, #4]
 1ae:	3f29      	subs	r7, #41	; 0x29
 1b0:	433c      	orrs	r4, r7
 1b2:	605c      	str	r4, [r3, #4]
	
	PORT->Group[0].PINCFG[4].reg |= PORT_PINCFG_PMUXEN;
 1b4:	373c      	adds	r7, #60	; 0x3c
 1b6:	5ddc      	ldrb	r4, [r3, r7]
 1b8:	4314      	orrs	r4, r2
 1ba:	b2e4      	uxtb	r4, r4
 1bc:	55dc      	strb	r4, [r3, r7]
	PORT->Group[0].PMUX[4 >> 1].reg = PORT_PMUX_PMUXE_B;
 1be:	3f12      	subs	r7, #18
 1c0:	55d9      	strb	r1, [r3, r7]
	PORT->Group[0].DIRCLR.reg |= PORT_PA04;
 1c2:	685c      	ldr	r4, [r3, #4]
 1c4:	4646      	mov	r6, r8
 1c6:	4326      	orrs	r6, r4
 1c8:	605e      	str	r6, [r3, #4]
	
	PORT->Group[0].PINCFG[5].reg |= PORT_PINCFG_PMUXEN;
 1ca:	2645      	movs	r6, #69	; 0x45
 1cc:	5d9c      	ldrb	r4, [r3, r6]
 1ce:	4314      	orrs	r4, r2
 1d0:	b2e4      	uxtb	r4, r4
 1d2:	559c      	strb	r4, [r3, r6]
	PORT->Group[0].PMUX[5 >> 1].reg = PORT_PMUX_PMUXO_B;
 1d4:	55d8      	strb	r0, [r3, r7]
	PORT->Group[0].DIRCLR.reg |= PORT_PA05;
 1d6:	685c      	ldr	r4, [r3, #4]
 1d8:	3e25      	subs	r6, #37	; 0x25
 1da:	4334      	orrs	r4, r6
 1dc:	605c      	str	r4, [r3, #4]
	
	PORT->Group[0].PINCFG[6].reg |= PORT_PINCFG_PMUXEN;
 1de:	3626      	adds	r6, #38	; 0x26
 1e0:	5d9c      	ldrb	r4, [r3, r6]
 1e2:	4314      	orrs	r4, r2
 1e4:	b2e4      	uxtb	r4, r4
 1e6:	559c      	strb	r4, [r3, r6]
	PORT->Group[0].PMUX[6 >> 1].reg = PORT_PMUX_PMUXE_B;
 1e8:	5559      	strb	r1, [r3, r5]
	PORT->Group[0].DIRCLR.reg |= PORT_PA06;
 1ea:	685c      	ldr	r4, [r3, #4]
 1ec:	3e06      	subs	r6, #6
 1ee:	4334      	orrs	r4, r6
 1f0:	605c      	str	r4, [r3, #4]
	
	PORT->Group[0].PINCFG[7].reg |= PORT_PINCFG_PMUXEN;
 1f2:	3607      	adds	r6, #7
 1f4:	5d9c      	ldrb	r4, [r3, r6]
 1f6:	4314      	orrs	r4, r2
 1f8:	b2e4      	uxtb	r4, r4
 1fa:	559c      	strb	r4, [r3, r6]
	PORT->Group[0].PMUX[7 >> 1].reg = PORT_PMUX_PMUXO_B;
 1fc:	5558      	strb	r0, [r3, r5]
	PORT->Group[0].DIRCLR.reg |= PORT_PA07;
 1fe:	685c      	ldr	r4, [r3, #4]
 200:	354d      	adds	r5, #77	; 0x4d
 202:	432c      	orrs	r4, r5
 204:	605c      	str	r4, [r3, #4]
	
	//
	
	PORT->Group[0].PINCFG[10].reg |= PORT_PINCFG_PMUXEN;
 206:	3d36      	subs	r5, #54	; 0x36
 208:	5d5c      	ldrb	r4, [r3, r5]
 20a:	4314      	orrs	r4, r2
 20c:	b2e4      	uxtb	r4, r4
 20e:	555c      	strb	r4, [r3, r5]
	PORT->Group[0].PMUX[10 >> 1].reg = PORT_PMUX_PMUXE_B;
 210:	3d15      	subs	r5, #21
 212:	5559      	strb	r1, [r3, r5]
	PORT->Group[0].DIRCLR.reg |= PORT_PA10;
 214:	685e      	ldr	r6, [r3, #4]
 216:	2480      	movs	r4, #128	; 0x80
 218:	00e4      	lsls	r4, r4, #3
 21a:	4334      	orrs	r4, r6
 21c:	605c      	str	r4, [r3, #4]
	
	PORT->Group[0].PINCFG[11].reg |= PORT_PINCFG_PMUXEN;
 21e:	264b      	movs	r6, #75	; 0x4b
 220:	5d9c      	ldrb	r4, [r3, r6]
 222:	4314      	orrs	r4, r2
 224:	b2e4      	uxtb	r4, r4
 226:	559c      	strb	r4, [r3, r6]
	PORT->Group[0].PMUX[11 >> 1].reg = PORT_PMUX_PMUXO_B;
 228:	5558      	strb	r0, [r3, r5]
	PORT->Group[0].DIRCLR.reg |= PORT_PA11;
 22a:	685d      	ldr	r5, [r3, #4]
 22c:	2480      	movs	r4, #128	; 0x80
 22e:	0124      	lsls	r4, r4, #4
 230:	432c      	orrs	r4, r5
 232:	605c      	str	r4, [r3, #4]
	
	PORT->Group[0].PINCFG[14].reg |= PORT_PINCFG_PMUXEN;
 234:	254e      	movs	r5, #78	; 0x4e
 236:	5d5c      	ldrb	r4, [r3, r5]
 238:	4314      	orrs	r4, r2
 23a:	b2e4      	uxtb	r4, r4
 23c:	555c      	strb	r4, [r3, r5]
	PORT->Group[0].PMUX[14 >> 1].reg = PORT_PMUX_PMUXE_B;
 23e:	2437      	movs	r4, #55	; 0x37
 240:	5519      	strb	r1, [r3, r4]
	PORT->Group[0].DIRCLR.reg |= PORT_PA14;
 242:	685d      	ldr	r5, [r3, #4]
 244:	2180      	movs	r1, #128	; 0x80
 246:	01c9      	lsls	r1, r1, #7
 248:	4329      	orrs	r1, r5
 24a:	6059      	str	r1, [r3, #4]
	
	PORT->Group[0].PINCFG[15].reg |= PORT_PINCFG_PMUXEN;
 24c:	254f      	movs	r5, #79	; 0x4f
 24e:	5d59      	ldrb	r1, [r3, r5]
 250:	430a      	orrs	r2, r1
 252:	b2d2      	uxtb	r2, r2
 254:	555a      	strb	r2, [r3, r5]
	PORT->Group[0].PMUX[15 >> 1].reg = PORT_PMUX_PMUXO_B;
 256:	5518      	strb	r0, [r3, r4]
	PORT->Group[0].DIRCLR.reg |= PORT_PA15;
 258:	6859      	ldr	r1, [r3, #4]
 25a:	2280      	movs	r2, #128	; 0x80
 25c:	0212      	lsls	r2, r2, #8
 25e:	430a      	orrs	r2, r1
 260:	605a      	str	r2, [r3, #4]
  
	/* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 262:	4a10      	ldr	r2, [pc, #64]	; (2a4 <setupADC+0x1b8>)
 264:	7e53      	ldrb	r3, [r2, #25]
 266:	09db      	lsrs	r3, r3, #7
 268:	d1fc      	bne.n	264 <setupADC+0x178>
  
	/* Enable the ADC. */
	ADC->CTRLA.bit.ENABLE = 1;
 26a:	4a0e      	ldr	r2, [pc, #56]	; (2a4 <setupADC+0x1b8>)
 26c:	7813      	ldrb	r3, [r2, #0]
 26e:	2102      	movs	r1, #2
 270:	430b      	orrs	r3, r1
 272:	7013      	strb	r3, [r2, #0]
	
	
	// run a conversion and throw it away to buffer the output / prevent bad data

	while (ADC->STATUS.bit.SYNCBUSY) {};
 274:	7e53      	ldrb	r3, [r2, #25]
 276:	09db      	lsrs	r3, r3, #7
 278:	d1fc      	bne.n	274 <setupADC+0x188>
		
	/* Start the ADC using a software trigger. */
	ADC->SWTRIG.bit.START = 1;
 27a:	4a0a      	ldr	r2, [pc, #40]	; (2a4 <setupADC+0x1b8>)
 27c:	7b13      	ldrb	r3, [r2, #12]
 27e:	2102      	movs	r1, #2
 280:	430b      	orrs	r3, r1
 282:	7313      	strb	r3, [r2, #12]
		
	/* Wait for the result ready flag to be set. */
	while (ADC->INTFLAG.bit.RESRDY == 0);
 284:	7e13      	ldrb	r3, [r2, #24]
 286:	07db      	lsls	r3, r3, #31
 288:	d5fc      	bpl.n	284 <setupADC+0x198>
		
	/* Clear the flag. */
	ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
 28a:	2201      	movs	r2, #1
 28c:	4b05      	ldr	r3, [pc, #20]	; (2a4 <setupADC+0x1b8>)
 28e:	761a      	strb	r2, [r3, #24]
};
 290:	bc04      	pop	{r2}
 292:	4690      	mov	r8, r2
 294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 296:	46c0      	nop			; (mov r8, r8)
 298:	40000400 	.word	0x40000400
 29c:	00004013 	.word	0x00004013
 2a0:	40000c00 	.word	0x40000c00
 2a4:	42002000 	.word	0x42002000
 2a8:	00806024 	.word	0x00806024
 2ac:	00806020 	.word	0x00806020
 2b0:	0f001800 	.word	0x0f001800
 2b4:	41004400 	.word	0x41004400

000002b8 <readADC>:
};

//func to read ADC
uint32_t readADC (void) {
	/* Wait for bus synchronization. */
	while (ADC->STATUS.bit.SYNCBUSY) {};
 2b8:	4a08      	ldr	r2, [pc, #32]	; (2dc <readADC+0x24>)
 2ba:	7e53      	ldrb	r3, [r2, #25]
 2bc:	09db      	lsrs	r3, r3, #7
 2be:	d1fc      	bne.n	2ba <readADC+0x2>
	
	/* Start the ADC using a software trigger. */
	ADC->SWTRIG.bit.START = 1;
 2c0:	4a06      	ldr	r2, [pc, #24]	; (2dc <readADC+0x24>)
 2c2:	7b13      	ldrb	r3, [r2, #12]
 2c4:	2102      	movs	r1, #2
 2c6:	430b      	orrs	r3, r1
 2c8:	7313      	strb	r3, [r2, #12]
	
	/* Wait for the result ready flag to be set. */
	while (ADC->INTFLAG.bit.RESRDY == 0);
 2ca:	7e13      	ldrb	r3, [r2, #24]
 2cc:	07db      	lsls	r3, r3, #31
 2ce:	d5fc      	bpl.n	2ca <readADC+0x12>
	
	/* Clear the flag. */
	ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
 2d0:	4b02      	ldr	r3, [pc, #8]	; (2dc <readADC+0x24>)
 2d2:	2201      	movs	r2, #1
 2d4:	761a      	strb	r2, [r3, #24]
	
	/* Read the value. */
	return ADC->RESULT.reg;
 2d6:	8b58      	ldrh	r0, [r3, #26]
 2d8:	b280      	uxth	r0, r0
 2da:	4770      	bx	lr
 2dc:	42002000 	.word	0x42002000

000002e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 2e0:	e7fe      	b.n	2e0 <Dummy_Handler>
	...

000002e4 <Reset_Handler>:
{
 2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 2e6:	4a2a      	ldr	r2, [pc, #168]	; (390 <Reset_Handler+0xac>)
 2e8:	4b2a      	ldr	r3, [pc, #168]	; (394 <Reset_Handler+0xb0>)
 2ea:	429a      	cmp	r2, r3
 2ec:	d011      	beq.n	312 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 2ee:	001a      	movs	r2, r3
 2f0:	4b29      	ldr	r3, [pc, #164]	; (398 <Reset_Handler+0xb4>)
 2f2:	429a      	cmp	r2, r3
 2f4:	d20d      	bcs.n	312 <Reset_Handler+0x2e>
 2f6:	4a29      	ldr	r2, [pc, #164]	; (39c <Reset_Handler+0xb8>)
 2f8:	3303      	adds	r3, #3
 2fa:	1a9b      	subs	r3, r3, r2
 2fc:	089b      	lsrs	r3, r3, #2
 2fe:	3301      	adds	r3, #1
 300:	009b      	lsls	r3, r3, #2
 302:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 304:	4823      	ldr	r0, [pc, #140]	; (394 <Reset_Handler+0xb0>)
 306:	4922      	ldr	r1, [pc, #136]	; (390 <Reset_Handler+0xac>)
 308:	588c      	ldr	r4, [r1, r2]
 30a:	5084      	str	r4, [r0, r2]
 30c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 30e:	429a      	cmp	r2, r3
 310:	d1fa      	bne.n	308 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 312:	4a23      	ldr	r2, [pc, #140]	; (3a0 <Reset_Handler+0xbc>)
 314:	4b23      	ldr	r3, [pc, #140]	; (3a4 <Reset_Handler+0xc0>)
 316:	429a      	cmp	r2, r3
 318:	d20a      	bcs.n	330 <Reset_Handler+0x4c>
 31a:	43d3      	mvns	r3, r2
 31c:	4921      	ldr	r1, [pc, #132]	; (3a4 <Reset_Handler+0xc0>)
 31e:	185b      	adds	r3, r3, r1
 320:	2103      	movs	r1, #3
 322:	438b      	bics	r3, r1
 324:	3304      	adds	r3, #4
 326:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 328:	2100      	movs	r1, #0
 32a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 32c:	4293      	cmp	r3, r2
 32e:	d1fc      	bne.n	32a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 330:	4a1d      	ldr	r2, [pc, #116]	; (3a8 <Reset_Handler+0xc4>)
 332:	21ff      	movs	r1, #255	; 0xff
 334:	4b1d      	ldr	r3, [pc, #116]	; (3ac <Reset_Handler+0xc8>)
 336:	438b      	bics	r3, r1
 338:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 33a:	39fd      	subs	r1, #253	; 0xfd
 33c:	2390      	movs	r3, #144	; 0x90
 33e:	005b      	lsls	r3, r3, #1
 340:	4a1b      	ldr	r2, [pc, #108]	; (3b0 <Reset_Handler+0xcc>)
 342:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 344:	4a1b      	ldr	r2, [pc, #108]	; (3b4 <Reset_Handler+0xd0>)
 346:	78d3      	ldrb	r3, [r2, #3]
 348:	2503      	movs	r5, #3
 34a:	43ab      	bics	r3, r5
 34c:	2402      	movs	r4, #2
 34e:	4323      	orrs	r3, r4
 350:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 352:	78d3      	ldrb	r3, [r2, #3]
 354:	270c      	movs	r7, #12
 356:	43bb      	bics	r3, r7
 358:	2608      	movs	r6, #8
 35a:	4333      	orrs	r3, r6
 35c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 35e:	4b16      	ldr	r3, [pc, #88]	; (3b8 <Reset_Handler+0xd4>)
 360:	7b98      	ldrb	r0, [r3, #14]
 362:	2230      	movs	r2, #48	; 0x30
 364:	4390      	bics	r0, r2
 366:	2220      	movs	r2, #32
 368:	4310      	orrs	r0, r2
 36a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 36c:	7b99      	ldrb	r1, [r3, #14]
 36e:	43b9      	bics	r1, r7
 370:	4331      	orrs	r1, r6
 372:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 374:	7b9a      	ldrb	r2, [r3, #14]
 376:	43aa      	bics	r2, r5
 378:	4322      	orrs	r2, r4
 37a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 37c:	4a0f      	ldr	r2, [pc, #60]	; (3bc <Reset_Handler+0xd8>)
 37e:	6853      	ldr	r3, [r2, #4]
 380:	2180      	movs	r1, #128	; 0x80
 382:	430b      	orrs	r3, r1
 384:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 386:	4b0e      	ldr	r3, [pc, #56]	; (3c0 <Reset_Handler+0xdc>)
 388:	4798      	blx	r3
        main();
 38a:	4b0e      	ldr	r3, [pc, #56]	; (3c4 <Reset_Handler+0xe0>)
 38c:	4798      	blx	r3
 38e:	e7fe      	b.n	38e <Reset_Handler+0xaa>
 390:	000005bc 	.word	0x000005bc
 394:	20000000 	.word	0x20000000
 398:	20000434 	.word	0x20000434
 39c:	20000004 	.word	0x20000004
 3a0:	20000434 	.word	0x20000434
 3a4:	20000474 	.word	0x20000474
 3a8:	e000ed00 	.word	0xe000ed00
 3ac:	00000000 	.word	0x00000000
 3b0:	41007000 	.word	0x41007000
 3b4:	41005000 	.word	0x41005000
 3b8:	41004800 	.word	0x41004800
 3bc:	41004000 	.word	0x41004000
 3c0:	000003f5 	.word	0x000003f5
 3c4:	000003d9 	.word	0x000003d9

000003c8 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 3c8:	4a01      	ldr	r2, [pc, #4]	; (3d0 <SystemInit+0x8>)
 3ca:	4b02      	ldr	r3, [pc, #8]	; (3d4 <SystemInit+0xc>)
 3cc:	601a      	str	r2, [r3, #0]
        return;
}
 3ce:	4770      	bx	lr
 3d0:	000f4240 	.word	0x000f4240
 3d4:	20000000 	.word	0x20000000

000003d8 <main>:

#include "sam.h"


int main(void)
{
 3d8:	b510      	push	{r4, lr}
    /* Initialize the SAM system */
    SystemInit();
 3da:	4b03      	ldr	r3, [pc, #12]	; (3e8 <main+0x10>)
 3dc:	4798      	blx	r3
    
    //user init
    setupADC();
 3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <main+0x14>)
 3e0:	4798      	blx	r3
    //setupI2C();

    /* Replace with your application code */
    while (1) 
    {
		uint16_t res = readADC();
 3e2:	4c03      	ldr	r4, [pc, #12]	; (3f0 <main+0x18>)
 3e4:	47a0      	blx	r4
 3e6:	e7fd      	b.n	3e4 <main+0xc>
 3e8:	000003c9 	.word	0x000003c9
 3ec:	000000ed 	.word	0x000000ed
 3f0:	000002b9 	.word	0x000002b9

000003f4 <__libc_init_array>:
 3f4:	b570      	push	{r4, r5, r6, lr}
 3f6:	4e0d      	ldr	r6, [pc, #52]	; (42c <STACK_SIZE+0x2c>)
 3f8:	4d0d      	ldr	r5, [pc, #52]	; (430 <STACK_SIZE+0x30>)
 3fa:	2400      	movs	r4, #0
 3fc:	1bad      	subs	r5, r5, r6
 3fe:	10ad      	asrs	r5, r5, #2
 400:	d005      	beq.n	40e <STACK_SIZE+0xe>
 402:	00a3      	lsls	r3, r4, #2
 404:	58f3      	ldr	r3, [r6, r3]
 406:	3401      	adds	r4, #1
 408:	4798      	blx	r3
 40a:	42a5      	cmp	r5, r4
 40c:	d1f9      	bne.n	402 <STACK_SIZE+0x2>
 40e:	f000 f8c3 	bl	598 <_init>
 412:	4e08      	ldr	r6, [pc, #32]	; (434 <STACK_SIZE+0x34>)
 414:	4d08      	ldr	r5, [pc, #32]	; (438 <STACK_SIZE+0x38>)
 416:	2400      	movs	r4, #0
 418:	1bad      	subs	r5, r5, r6
 41a:	10ad      	asrs	r5, r5, #2
 41c:	d005      	beq.n	42a <STACK_SIZE+0x2a>
 41e:	00a3      	lsls	r3, r4, #2
 420:	58f3      	ldr	r3, [r6, r3]
 422:	3401      	adds	r4, #1
 424:	4798      	blx	r3
 426:	42a5      	cmp	r5, r4
 428:	d1f9      	bne.n	41e <STACK_SIZE+0x1e>
 42a:	bd70      	pop	{r4, r5, r6, pc}
 42c:	000005a4 	.word	0x000005a4
 430:	000005a4 	.word	0x000005a4
 434:	000005a4 	.word	0x000005a4
 438:	000005ac 	.word	0x000005ac

0000043c <register_fini>:
 43c:	4b03      	ldr	r3, [pc, #12]	; (44c <register_fini+0x10>)
 43e:	b510      	push	{r4, lr}
 440:	2b00      	cmp	r3, #0
 442:	d002      	beq.n	44a <register_fini+0xe>
 444:	4802      	ldr	r0, [pc, #8]	; (450 <register_fini+0x14>)
 446:	f000 f805 	bl	454 <atexit>
 44a:	bd10      	pop	{r4, pc}
 44c:	00000000 	.word	0x00000000
 450:	00000465 	.word	0x00000465

00000454 <atexit>:
 454:	b510      	push	{r4, lr}
 456:	0001      	movs	r1, r0
 458:	2300      	movs	r3, #0
 45a:	2200      	movs	r2, #0
 45c:	2000      	movs	r0, #0
 45e:	f000 f81f 	bl	4a0 <__register_exitproc>
 462:	bd10      	pop	{r4, pc}

00000464 <__libc_fini_array>:
 464:	b570      	push	{r4, r5, r6, lr}
 466:	4b09      	ldr	r3, [pc, #36]	; (48c <__libc_fini_array+0x28>)
 468:	4c09      	ldr	r4, [pc, #36]	; (490 <__libc_fini_array+0x2c>)
 46a:	1ae4      	subs	r4, r4, r3
 46c:	10a4      	asrs	r4, r4, #2
 46e:	d009      	beq.n	484 <__libc_fini_array+0x20>
 470:	4a08      	ldr	r2, [pc, #32]	; (494 <__libc_fini_array+0x30>)
 472:	18a5      	adds	r5, r4, r2
 474:	00ad      	lsls	r5, r5, #2
 476:	18ed      	adds	r5, r5, r3
 478:	682b      	ldr	r3, [r5, #0]
 47a:	3c01      	subs	r4, #1
 47c:	4798      	blx	r3
 47e:	3d04      	subs	r5, #4
 480:	2c00      	cmp	r4, #0
 482:	d1f9      	bne.n	478 <__libc_fini_array+0x14>
 484:	f000 f892 	bl	5ac <_fini>
 488:	bd70      	pop	{r4, r5, r6, pc}
 48a:	46c0      	nop			; (mov r8, r8)
 48c:	000005b8 	.word	0x000005b8
 490:	000005bc 	.word	0x000005bc
 494:	3fffffff 	.word	0x3fffffff

00000498 <__retarget_lock_acquire_recursive>:
 498:	4770      	bx	lr
 49a:	46c0      	nop			; (mov r8, r8)

0000049c <__retarget_lock_release_recursive>:
 49c:	4770      	bx	lr
 49e:	46c0      	nop			; (mov r8, r8)

000004a0 <__register_exitproc>:
 4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 4a2:	464e      	mov	r6, r9
 4a4:	4645      	mov	r5, r8
 4a6:	46de      	mov	lr, fp
 4a8:	4657      	mov	r7, sl
 4aa:	b5e0      	push	{r5, r6, r7, lr}
 4ac:	4d36      	ldr	r5, [pc, #216]	; (588 <__register_exitproc+0xe8>)
 4ae:	b083      	sub	sp, #12
 4b0:	0006      	movs	r6, r0
 4b2:	6828      	ldr	r0, [r5, #0]
 4b4:	4698      	mov	r8, r3
 4b6:	000f      	movs	r7, r1
 4b8:	4691      	mov	r9, r2
 4ba:	f7ff ffed 	bl	498 <__retarget_lock_acquire_recursive>
 4be:	4b33      	ldr	r3, [pc, #204]	; (58c <__register_exitproc+0xec>)
 4c0:	681c      	ldr	r4, [r3, #0]
 4c2:	23a4      	movs	r3, #164	; 0xa4
 4c4:	005b      	lsls	r3, r3, #1
 4c6:	58e0      	ldr	r0, [r4, r3]
 4c8:	2800      	cmp	r0, #0
 4ca:	d052      	beq.n	572 <__register_exitproc+0xd2>
 4cc:	6843      	ldr	r3, [r0, #4]
 4ce:	2b1f      	cmp	r3, #31
 4d0:	dc13      	bgt.n	4fa <__register_exitproc+0x5a>
 4d2:	1c5a      	adds	r2, r3, #1
 4d4:	9201      	str	r2, [sp, #4]
 4d6:	2e00      	cmp	r6, #0
 4d8:	d128      	bne.n	52c <__register_exitproc+0x8c>
 4da:	9a01      	ldr	r2, [sp, #4]
 4dc:	3302      	adds	r3, #2
 4de:	009b      	lsls	r3, r3, #2
 4e0:	6042      	str	r2, [r0, #4]
 4e2:	501f      	str	r7, [r3, r0]
 4e4:	6828      	ldr	r0, [r5, #0]
 4e6:	f7ff ffd9 	bl	49c <__retarget_lock_release_recursive>
 4ea:	2000      	movs	r0, #0
 4ec:	b003      	add	sp, #12
 4ee:	bc3c      	pop	{r2, r3, r4, r5}
 4f0:	4690      	mov	r8, r2
 4f2:	4699      	mov	r9, r3
 4f4:	46a2      	mov	sl, r4
 4f6:	46ab      	mov	fp, r5
 4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 4fa:	4b25      	ldr	r3, [pc, #148]	; (590 <__register_exitproc+0xf0>)
 4fc:	2b00      	cmp	r3, #0
 4fe:	d03d      	beq.n	57c <__register_exitproc+0xdc>
 500:	20c8      	movs	r0, #200	; 0xc8
 502:	0040      	lsls	r0, r0, #1
 504:	e000      	b.n	508 <__register_exitproc+0x68>
 506:	bf00      	nop
 508:	2800      	cmp	r0, #0
 50a:	d037      	beq.n	57c <__register_exitproc+0xdc>
 50c:	22a4      	movs	r2, #164	; 0xa4
 50e:	2300      	movs	r3, #0
 510:	0052      	lsls	r2, r2, #1
 512:	58a1      	ldr	r1, [r4, r2]
 514:	6043      	str	r3, [r0, #4]
 516:	6001      	str	r1, [r0, #0]
 518:	50a0      	str	r0, [r4, r2]
 51a:	3240      	adds	r2, #64	; 0x40
 51c:	5083      	str	r3, [r0, r2]
 51e:	3204      	adds	r2, #4
 520:	5083      	str	r3, [r0, r2]
 522:	3301      	adds	r3, #1
 524:	9301      	str	r3, [sp, #4]
 526:	2300      	movs	r3, #0
 528:	2e00      	cmp	r6, #0
 52a:	d0d6      	beq.n	4da <__register_exitproc+0x3a>
 52c:	009a      	lsls	r2, r3, #2
 52e:	4692      	mov	sl, r2
 530:	4482      	add	sl, r0
 532:	464a      	mov	r2, r9
 534:	2188      	movs	r1, #136	; 0x88
 536:	4654      	mov	r4, sl
 538:	5062      	str	r2, [r4, r1]
 53a:	22c4      	movs	r2, #196	; 0xc4
 53c:	0052      	lsls	r2, r2, #1
 53e:	4691      	mov	r9, r2
 540:	4481      	add	r9, r0
 542:	464a      	mov	r2, r9
 544:	3987      	subs	r1, #135	; 0x87
 546:	4099      	lsls	r1, r3
 548:	6812      	ldr	r2, [r2, #0]
 54a:	468b      	mov	fp, r1
 54c:	430a      	orrs	r2, r1
 54e:	4694      	mov	ip, r2
 550:	464a      	mov	r2, r9
 552:	4661      	mov	r1, ip
 554:	6011      	str	r1, [r2, #0]
 556:	2284      	movs	r2, #132	; 0x84
 558:	4641      	mov	r1, r8
 55a:	0052      	lsls	r2, r2, #1
 55c:	50a1      	str	r1, [r4, r2]
 55e:	2e02      	cmp	r6, #2
 560:	d1bb      	bne.n	4da <__register_exitproc+0x3a>
 562:	0002      	movs	r2, r0
 564:	465c      	mov	r4, fp
 566:	328d      	adds	r2, #141	; 0x8d
 568:	32ff      	adds	r2, #255	; 0xff
 56a:	6811      	ldr	r1, [r2, #0]
 56c:	430c      	orrs	r4, r1
 56e:	6014      	str	r4, [r2, #0]
 570:	e7b3      	b.n	4da <__register_exitproc+0x3a>
 572:	0020      	movs	r0, r4
 574:	304d      	adds	r0, #77	; 0x4d
 576:	30ff      	adds	r0, #255	; 0xff
 578:	50e0      	str	r0, [r4, r3]
 57a:	e7a7      	b.n	4cc <__register_exitproc+0x2c>
 57c:	6828      	ldr	r0, [r5, #0]
 57e:	f7ff ff8d 	bl	49c <__retarget_lock_release_recursive>
 582:	2001      	movs	r0, #1
 584:	4240      	negs	r0, r0
 586:	e7b1      	b.n	4ec <__register_exitproc+0x4c>
 588:	20000430 	.word	0x20000430
 58c:	00000594 	.word	0x00000594
 590:	00000000 	.word	0x00000000

00000594 <_global_impure_ptr>:
 594:	20000008                                ... 

00000598 <_init>:
 598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 59a:	46c0      	nop			; (mov r8, r8)
 59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 59e:	bc08      	pop	{r3}
 5a0:	469e      	mov	lr, r3
 5a2:	4770      	bx	lr

000005a4 <__init_array_start>:
 5a4:	0000043d 	.word	0x0000043d

000005a8 <__frame_dummy_init_array_entry>:
 5a8:	000000b5                                ....

000005ac <_fini>:
 5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 5ae:	46c0      	nop			; (mov r8, r8)
 5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 5b2:	bc08      	pop	{r3}
 5b4:	469e      	mov	lr, r3
 5b6:	4770      	bx	lr

000005b8 <__fini_array_start>:
 5b8:	0000008d 	.word	0x0000008d
